apiVersion: v1
kind: Service
metadata:
  name: kubia
spec:
  clusterIP: None
  selector:
    app: kubia
  ports:
    - name: http
      port: 80

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: kubia
spec:
  serviceName: kubia # the name of service
  replicas: 2
  template: # pod template
    metadata:
      labels:
        app: kubia
    spec:
      containers:
        - name: kubia
          image: luksa/kubia-pet
          ports:
            - name: http
              containerPort: 8080
      volumeMounts:
        - name: data
          mountPath: /var/data
  volumeClaimTemplates: # pvc template
    - metadata:
        name: data
      spec:
        resources:
          requests:
            storage: 1Mi
        accessModes:
          - ReadWriteOnce

# ---------------------------------IMAGE CONTENT-----------------------------------
# const http = require('http');
# const os = require('os');
# const fs = require('fs');

# const dataFile = "/var/data/kubia.txt";

# function fileExists(file) {
#   try {
#     fs.statSync(file);
#     return true;
#   } catch (e) {
#     return false;
#   }
# }

# var handler = function(request, response) {
#   if (request.method == 'POST') {
#     var file = fs.createWriteStream(dataFile);
#     file.on('open', function (fd) {
#       request.pipe(file);
#       console.log("New data has been received and stored.");
#       response.writeHead(200);
#       response.end("Data stored on pod " + os.hostname() + "\n");
#     });
#   } else {
#     var data = fileExists(dataFile) ? fs.readFileSync(dataFile, 'utf8') : "No data posted yet";
#     response.writeHead(200);
#     response.write("You've hit " + os.hostname() + "\n");
#     response.end("Data stored on this pod: " + data + "\n");
#   }
# };

# var www = http.createServer(handler);
# www.listen(8080);